package bas.leanback.layout;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.widget.LinearLayout;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

/**
 * Generated by bas-leanback-layout-compiler. Do not edit it!
 */
public class LeanbackLinearLayoutTest extends LinearLayout implements BringChildToFrontHelper.Callback {

    private LeanbackLayoutHelper layoutHelper;
    private BringChildToFrontHelper bringChildToFrontHelper;

    public LeanbackLinearLayoutTest(@NonNull Context context) {
        this(context, null);
    }

    public LeanbackLinearLayoutTest(@NonNull Context context, @Nullable AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public LeanbackLinearLayoutTest(@NonNull Context context, @Nullable AttributeSet attrs,
                                    int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        layoutHelper = LeanbackLayoutHelper.create(this, attrs, defStyleAttr);
        boolean isSupportBringChildToFront = BringChildToFrontHelper.isLayoutSupportBringChildToFront(this);
        this.setChildrenDrawingOrderEnabled(!isSupportBringChildToFront);
        bringChildToFrontHelper = BringChildToFrontHelper.create(this, this, attrs, defStyleAttr);
    }

    @Override
    public void bringChildToFront(View child) {
        bringChildToFrontHelper.bringChildToFront(child);
    }

    @Override
    protected int getChildDrawingOrder(int childCount, int drawingPosition) {
        return bringChildToFrontHelper.getChildDrawingOrder(childCount, drawingPosition);
    }

    @Override
    public boolean dispatchUnhandledMove(@Nullable View focused, int direction) {
        boolean handled = super.dispatchUnhandledMove(focused, direction);
        if (handled) {
            return true;
        } else {
            return layoutHelper.dispatchUnhandledMove(focused, direction);
        }
    }


    @Override
    public void callSuperBringChildToFront(@org.jetbrains.annotations.Nullable View child) {
        super.bringChildToFront(child);
    }

    @Override
    public int callSuperGetChildDrawingOrder(int childCount, int drawingPosition) {
        return super.getChildDrawingOrder(childCount, drawingPosition);
    }

    @Override
    public boolean isChildrenDrawingOrderEnabled() {
        return super.isChildrenDrawingOrderEnabled();
    }
}
