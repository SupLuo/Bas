plugins {
    id 'java-library'
    id 'kotlin'

    /*用于上传maven*/
    id 'org.jetbrains.dokka'
    id 'maven'
}

java {
//    sourceCompatibility = JavaVersion.VERSION_1_7
//    targetCompatibility = JavaVersion.VERSION_1_7
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
}


dependencies {

//    api project(path: ':lib-core')
    gradle.ext.depApi(this, 'lib-core')

    /*kotlin基础库*/
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    /**
     * Kotlin-协程 https://github.com/hltj/kotlinx.coroutines-cn/blob/master/README.md#using-in-your-projects
     * */
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_core_version"

    /*用于扩展部分方法*/
    compileOnly "com.google.code.gson:gson:$gson_version"
    /*实际会引入jackson-core、jackson-annotations依赖*/
    compileOnly "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

    /**
     * https://github.com/square/moshi
     */
    compileOnly "com.squareup.moshi:moshi:1.8.0"

    // for test
    testImplementation 'junit:junit:4.+'
    testImplementation "com.google.code.gson:gson:$gson_version"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    testImplementation "com.alibaba:fastjson:$fastjson_version"

}

task generateSourcesJar(type: Jar) {
    group = 'jar'
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = "javadoc"
//    outputDirectory = javadoc.destinationDir
//}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}

def PROJECT_NAME = 'lib-core-ktx'
def PROJECT_VERSION = '0.0.3'
def PROJECT_DESC = ''
def ARTIFACT_ID = 'lib-core-ktx'


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def NEXUS_URL = properties.getProperty('NEXUS_URL')
def NEXUS_USER = properties.getProperty('NEXUS_USER')
def NEXUS_PWD = properties.getProperty('NEXUS_PWD')

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: NEXUS_URL) {
                authentication(userName: NEXUS_USER, password: NEXUS_PWD)
            }
            pom.project {
                name PROJECT_NAME
                version PROJECT_VERSION
                artifactId ARTIFACT_ID
                groupId 'bas.lib'
                packaging 'aar'
                description PROJECT_DESC
            }
        }
    }
}